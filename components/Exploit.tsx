import { CodeBlock } from '@/helper/codeBlock'
import React, { FC, RefObject } from "react";


type SectionRefs = {
  overview: RefObject<HTMLElement | null>;
  flaw: RefObject<HTMLElement | null>;
  exploit: RefObject<HTMLElement | null>;
  fix: RefObject<HTMLElement | null>;
  reflections: RefObject<HTMLElement | null>;
};
type ExploitProps = {
  sectionRefs: SectionRefs;
  reportData: {
    exploitSteps: {
      title: string;
      content: string;
      code: string;
    }[];
    [key: string]: any;
  };
  currentExploitStep: number;
  setCurrentExploitStep: React.Dispatch<React.SetStateAction<number>>;
};

const Exploit: React.FC<ExploitProps> = ({ sectionRefs, reportData, currentExploitStep, setCurrentExploitStep }) => {
  return (
     <section
              id="exploit"
              ref={sectionRefs.exploit}
              className="mb-24 scroll-mt-24"
            >
              <h2 className="text-3xl font-bold text-slate-900 mb-8 text-center">
                The Exploit: A Step-by-Step Guide
              </h2>
              <p className="text-center max-w-3xl mx-auto text-slate-600 mb-12">
                Exploiting this flaw involves setting up a lab, intercepting traffic
                to inject a malicious payload, and using automated tools to extract
                data from the database.
              </p>
              <div className="relative">
                <div className="bg-white p-8 rounded-lg shadow-md min-h-[300px]">
                  <h3 className="text-2xl font-semibold text-slate-800 mb-4">
                    {reportData.exploitSteps[currentExploitStep].title}
                  </h3>
                  <p className="text-slate-600 leading-relaxed mb-6">
                    {reportData.exploitSteps[currentExploitStep].content}
                  </p>
                  <CodeBlock
                    code={reportData.exploitSteps[currentExploitStep].code}
                  />
                </div>
                <div className="flex justify-center items-center mt-6 space-x-4">
                  <button
                    onClick={() => setCurrentExploitStep((s) => Math.max(0, s - 1))}
                    disabled={currentExploitStep === 0}
                    className="bg-slate-200 text-slate-700 font-semibold py-2 px-4 rounded-lg hover:bg-slate-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Previous
                  </button>
                  <div className="text-sm font-medium text-slate-500">
                    Step {currentExploitStep + 1} of{" "}
                    {reportData.exploitSteps.length}
                  </div>
                  <button
                    onClick={() =>
                      setCurrentExploitStep((s) =>
                        Math.min(reportData.exploitSteps.length - 1, s + 1)
                      )
                    }
                    disabled={
                      currentExploitStep === reportData.exploitSteps.length - 1
                    }
                    className="bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Next
                  </button>
                </div>
              </div>
            </section>
  )
}

export default Exploit